ls      			(return list file in current working directory)
ls -r				(list the tree directory of current working directory)
cd     				(change directory)
~      				(home directory)
/       			(root directory)
.       			(current directory)
..      			(parent directory)
pwd     			(show the path to current working directory)
find				(find file in the directory tree)
find . -name '[file name]'	(find file in current folder '.' :mean current folder, can change '.' to a path where you want to find)
find . -iname '[file name]'	(find file in current folder but dont mind upper or lowercase)
mkdir [folder name]		(create a new folder)
rm [file or folder]		(remove file or folder)
rm -m [folder name]		(remove folder along with child object)
rmdir [folder name]		(only remove empty folder)
touch [files]			(create a new file and update file date of exist file)
date -r [file]			(show the 'file date':mean the last time you modifi it)
cp [file] [folder/file]		(copy file to a folder or to a new file)
cp -r [folder] [folder]		(copy folder)
mv [files] [folder]		(move file)
mv [folders] [folder]		(move folder)
chmod [mode] [file] 		(change mode of file)
*				(like % in sql)
ls -l				(list some attribute of file)
ls -a 				(list all file, include hidden files)
ls -la				(use combine 2 option to see all)
cat [file]			(print the file contents)
more [file]			(print the file contents page by page use "space bar" to view a next page and press q to quit)
less [file]			(print the file contents line by line use "Up Arrow" and "Down Arrow" to view and press q to quit)
head [file]			(print first 10 line of file)
head -n [N] [file] 		(print first N line of file)
tail [file]			(print last 10 line of file)
tail -n [N] [file]		(print last N line of file)
wc [file]			(print number of words, lines, characters in file)
wc -l | -w | -c [file]		(print number of lines or words or charactors in file)
sort [file] 			(sort line in the file)
sort -r [file]			(reverse sort line)
uniq [file]			(unique the line of file if they are consecutive)
grep [pattern] [file]		(return lines in file match with pattern)
grep -i [pattern] [file]	(return lines match with pattern but don't mind upper or lowercase)
cut -c [N-M] [file]		(return a file which contain N-M characters on line)
cut -d [char] -f[N] [file] 	(return a field N of line was split by single char)
paste [file file1 ...]		(merge lines from different files)
paste -d [str] [files]		(merge lines from different files with a str between each field (defaut option is TAB)) 
hostname			(print host name)
hostname -i			(print IP adress)
ifconfig			(see info of network)
ping [IP]			(ping infinite time)
ping -c [N] [IP]		(ping N time)
curl [URL]			(transfer data to and from URL) as (Client URL)  
tar -cf [name].tar [folder]	(archive files and folder)
tar -czf [name].gz [folder]	(archive .gz file)
tar -tf [name].tar		(check the content in file)
tar -xf [name].tar [folder]	(extract files and folder)
tar -xzf [name].gz [folder]	(extract .gz file)
zip [name].zip [folder]		
unzip [name].zip
[cmd 1] | ... | [cmd n]		(pipes: use the output of one command as the input of another)
tr [OPTION] [target][replace] 	(replace target characters to replacement characters)
\"				(matches with character " )
\s*				(matches with any number of whitespace (\s) characters
[0-9]				(matches with a digit from 0 to 9)
[A-Z]				(matches with a character form A to Z)
?\.				(matches with a . )
" "				(understand special char in string)
' '				(opposite of the above line)
>				(redirect output to the file and overwrite if it exist)
>>				(append output to the file)
2>				(redirect standard error the file)
2>>				(append standard error the file)
<				(redirect file contents to standard input)
$(command) or `command`		(replace the command with its output)
Batch mode (;)			(take turn to run command)
Concurrent mode (&)		(all command run the same time)

---------CONDITIONALS---------
syntax:

if [ condition ]
then
    statement_block_1
else
    statement_block_2
fi

example:

if [[ $# == 2 ]]
then 
    echo "number of arguments is equal to 2"
else
    echo "number of arguments is not equal to 2"
fi

----------ARRAY---------

create a array: my_array=(1 2 "three" "four" 5) 
create a empty array: declare -a empty_array
add one element: my_array+=("six")

-------FOR-LOOPS--------

examples:

for item in ${my_array[@]}; do
    echo $item
done

for i in ${!my_array[@]}; do
    echo ${my_array[$i]}
done

N=6
for (( i=0; i<=$N; i++ )); do
    echo $i
done

sh file ex:

#! /bin/bash 
my_array=(1 2 3)
count=0
sum=0
for i in ${!my_array[@]}; do
    echo ${my_array[$i]}
    count=$($(count)+1)
    sum=$(($sum+${my_array[$i]}))
done 
echo $count
echo $sum

--------CRONTAB---------

$ crontab -e

job syntax: m h dom mon dow command 

example job: 30 15 * * 0 date >> sundays.txt
(add current date into file sundays.txt every sunday at 15:30)


